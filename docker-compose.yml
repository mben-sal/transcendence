services:
  db:
    image: postgres:13
    container_name: database
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=ft_transcendence
      - POSTGRES_PASSWORD=ft_transcendence
      - POSTGRES_DB=backend_db
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ft_transcendence"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - app-network

  adminer:
    image: adminer:4.8.1-standalone
    container_name: adminer
    ports:
      - "8082:8080"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: always

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP Server
      - "8025:8025"  # Interface Web
    networks:
      - app-network
    restart: always
    
  swagger:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger
    ports:
      - "8081:8080"
    environment:
      - SWAGGER_JSON=/app/swagger.json
    volumes:
      - ./Backend/swagger.json:/app/swagger.json
    networks:
      - app-network
    restart: always

  backend:
    build: 
      context: ./Backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - DB_NAME=backend_db
      - DB_USER=ft_transcendence
      - DB_PASSWORD=ft_transcendence
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEBUG=True
    volumes:
      - ./Backend/backend:/app/backend
      - static_volume:/app/backend/static
      - media_volume:/app/backend/media
    command: >
      sh -c "
        mkdir -p /app/backend/static &&
        mkdir -p /app/backend/media &&
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        daphne -b 0.0.0.0 -p 8000 backend.asgi:application"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      mailhog:
        condition: service_started
    networks:
      - app-network
    restart: always

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports: 
      - "5173:5173"
    networks:
      - app-network
    volumes: 
      - ./Frontend:/app
      - frontend_modules:/app/node_modules
    restart: always
    depends_on:
      - backend
      
  nginx:
    image: nginx:1.21
    container_name: nginx
    ports:
      - "80:80" #http
      - "8443:443" #https
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/static
      - media_volume:/media
      - ./nginx/logs:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - frontend
    restart: always

volumes:
  postgres_data:
  frontend_modules:
  static_volume:
  media_volume:
  redis_data:

networks:
  app-network:
    driver: bridge