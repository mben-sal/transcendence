# services:
#   db:
#     image: postgres:13
#     container_name: database
#     environment:
#       POSTGRES_USER: ft_transcendence
#       POSTGRES_PASSWORD: ft_transcendence
#       POSTGRES_DB: backend_db
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - app-network
#     restart: always
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ft_transcendence -d backend_db"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   redis:
#     image: redis:latest
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     restart: always
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   adminer:
#     image: adminer:4.8.1-standalone
#     container_name: adminer
#     ports:
#       - "8082:8080"
#     networks:
#       - app-network
#     depends_on:
#       db:
#         condition: service_healthy
#     restart: always

#   mailhog:
#     image: mailhog/mailhog:latest
#     container_name: mailhog
#     ports:
#       - "1025:1025"  # SMTP Server
#       - "8025:8025"  # Interface Web
#     networks:
#       - app-network
#     restart: always

#   swagger:
#     image: swaggerapi/swagger-ui:latest
#     container_name: swagger
#     ports:
#       - "8081:8080"
#     environment:
#       - SWAGGER_JSON=/app/swagger.json
#     volumes:
#       - ./Backend/swagger.json:/app/swagger.json
#     networks:
#       - app-network
#     restart: always

#   nginx:
#     build:
#       context: ./nginx
#       dockerfile: Dockerfile
#     container_name: nginx
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
#       - ./nginx/ssl:/etc/nginx/ssl
#       - static_volume:/app/backend/static
#       - media_volume:/app/backend/media
#     depends_on:
#       - backend
#       - frontend
#     networks:
#       - app-network
#     restart: always
#   backend:
#     build: 
#       context: ./Backend
#       dockerfile: Dockerfile
#     container_name: backend
#     volumes:
#       - ./Backend/backend:/app/backend
#       - static_volume:/app/backend/static
#       - media_volume:/app/backend/media
#     command: >
#       sh -c "
#         mkdir -p /app/backend/static &&
#         mkdir -p /app/backend/media &&
#         python manage.py makemigrations &&
#         python manage.py migrate &&
#         python manage.py collectstatic --noinput &&
#         python manage.py runserver 0.0.0.0:8000"
#     ports:
#       - "8000:8000"
#     depends_on:
#       db:
#         condition: service_healthy
#       redis:
#         condition: service_healthy
#       mailhog:
#         condition: service_started
#     networks:
#       - app-network
#     restart: always

#   frontend:
#     build:
#       context: ./Frontend
#       dockerfile: Dockerfile
#     container_name: frontend
#     ports: 
#       - "5173:5173"
#     networks:
#       - app-network
#     volumes: 
#       - ./Frontend:/app
#       - frontend_modules:/app/node_modules
#     restart: always
#     depends_on:
#       - backend

# volumes:
#   postgres_data:
#   frontend_modules:
#   static_volume:
#   media_volume:
#   redis_data:

# networks:
#   app-network:
#     driver: bridge


services:
  db:
    image: postgres:13
    container_name: database
    environment:
      POSTGRES_USER: ft_transcendence
      POSTGRES_PASSWORD: ft_transcendence
      POSTGRES_DB: backend_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ft_transcendence -d backend_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:4.8.1-standalone
    container_name: adminer
    ports:
      - "8082:8080"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: always

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP Server
      - "8025:8025"  # Interface Web
    networks:
      - app-network
    restart: always

  swagger:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger
    ports:
      - "8081:8080"
    environment:
      - SWAGGER_JSON=/app/swagger.json
    volumes:
      - ./Backend/swagger.json:/app/swagger.json
    networks:
      - app-network
    restart: always

  backend:
    build: 
      context: ./Backend
      dockerfile: Dockerfile
    container_name: backend
    volumes:
      - ./Backend/backend:/app/backend
      - static_volume:/app/backend/static
      - media_volume:/app/backend/media
    command: >
      sh -c "
        mkdir -p /app/backend/static &&
        mkdir -p /app/backend/media &&
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        export DJANGO_SETTINGS_MODULE=backend.settings &&
        python manage.py runserver 0.0.0.0:8000 --nothreading"
    # ports:  # Commenté car Nginx va s'occuper de l'exposition
    #   - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - app-network
    restart: always

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: frontend
    # ports:  # Commenté car Nginx va s'occuper de l'exposition
    #   - "5173:5173"
    networks:
      - app-network
    volumes: 
      - ./Frontend:/app
      - frontend_modules:/app/node_modules
    restart: always
    depends_on:
      - backend

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
      - static_volume:/static
      - media_volume:/media
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: always

volumes:
  postgres_data:
  frontend_modules:
  static_volume:
  media_volume:
  redis_data:

networks:
  app-network:
    driver: bridge